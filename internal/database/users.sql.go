// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, name, email, password_hash, activated, version
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Activated,
		&i.Version,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (id, created_at, updated_at, name, email, password_hash, activated, version)
VALUES (
  $1, -- id
  $2, -- created_at
  $3, -- updated_at
  $4, -- name
  $5, -- email
  $6, -- password_hash
  $7, -- activated
  1  -- version (default to 1 for new users)
)
RETURNING id, created_at, updated_at, name, email, password_hash, activated, version
`

type InsertUserParams struct {
	ID           uuid.UUID
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Name         string
	Email        string
	PasswordHash []byte
	Activated    bool
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.Activated,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Activated,
		&i.Version,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name = $2,
    email = $3,
    password_hash = $4,
    activated = $5,
    updated_at = $6,
    version = version + 1
WHERE id = $1 AND version = $7
RETURNING version
`

type UpdateUserParams struct {
	ID           uuid.UUID
	Name         string
	Email        string
	PasswordHash []byte
	Activated    bool
	UpdatedAt    time.Time
	Version      int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.Activated,
		arg.UpdatedAt,
		arg.Version,
	)
	var version int32
	err := row.Scan(&version)
	return version, err
}
