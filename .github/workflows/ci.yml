name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      
      - name: Run tests
        run: go test ./... -cover
      
      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Run gosec
        run: gosec -exclude-generated ./...

  fmt-check:
    name: Style
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Check formatting
        run: test -z "$(go fmt ./...)"

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck
        run: staticcheck ./...

  build-and-push:
    name: Build and Push Docker Image
    needs: [tests, fmt-check]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Convert IMAGE_NAME to lowercase
      run: echo "IMAGE_NAME=${{ env.REGISTRY }}/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Log in to the Container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}


  deploy:
    name: Deploy to Digital Ocean
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Convert IMAGE_NAME to lowercase
        run: echo "IMAGE_NAME=$(echo ${{ env.REGISTRY }}/${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
      - name: Create .env file
        run: |
          echo "ENV=${{ secrets.ENV }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "DB=${{ secrets.DB }}" >> .env
          echo "MAILER_HOST=${{ secrets.MAILER_HOST }}" >> .env
          echo "MAILER_PORT=${{ secrets.MAILER_PORT }}" >> .env
          echo "MAILER_USERNAME=${{ secrets.MAILER_USERNAME }}" >> .env
          echo "MAILER_PASSWORD=${{ secrets.MAILER_PASSWORD }}" >> .env
          echo "MAILER_SENDER=${{ secrets.MAILER_SENDER }}" >> .env
          echo "LIMITER_ENABLED=${{ secrets.LIMITER_ENABLED }}" >> .env
          echo "LIMITER_RPS=${{ secrets.LIMITER_RPS }}" >> .env
          echo "LIMITER_BURST=${{ secrets.LIMITER_BURST }}" >> .env
          echo "TRUSTED_ORIGINS=${{ secrets.TRUSTED_ORIGINS }}" >> .env
          echo "POSTGRES_USER=${{secrets.POSTGRES_USER}}" >> .env
          echo "POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}}" >> .env
          echo "POSTGRES_DB=${{secrets.POSTGRES_DB}}" >> .env
      - name: Copy files to Digital Ocean
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          source: "docker-compose.yaml,Dockerfile,.env"
          target: "/home/gobloggagg/go-blog-aggregator/"

      - name: Deploy to Digital Ocean droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            cd /home/gobloggagg/go-blog-aggregator/
            echo "Current directory: $(pwd)"
            echo "Contents of current directory:"
            echo "DB=${{ secrets.POSTGRES_DB }}"
            ls -la
            echo "IMAGE_NAME=${{ env.IMAGE_NAME }}" >> .env
            docker-compose pull
            # Run Goose migrations
            docker-compose run --rm app goose -dir ./sql/schema postgres "$DB" up
            docker-compose up -d